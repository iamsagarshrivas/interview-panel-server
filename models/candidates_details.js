const mongoose = require('mongoose');

const candidateDetailSchema=mongoose.Schema(
{
  jobId:[mongoose.Schema.Types.ObjectId],
  basicInfo:{
    candidateName:String,
    candidateEmail:String,
    gender:String,
    age:Number
  },
  educationalQualification:{
    highschool:{
      institute:String,
      passingYear:Number,
      board:String,
      percentage:Number,
      remark:String
    },
    intermediate:{
      institute:String,
      passingYear:Number,
      board:String,
      percentage:Number,
      remark:String
    },
    graduation:{
      course:String,
      stream:String,
      institute:String,
      passingYear:Number,
      university:String,
      collegeName:String,
      percentage:Number,
      remark:String
    },
    other:[{
      courseName:String,
      institute:String,
      passingYear:Number,
      remark:String,
    }]
  },
  residentialDetails:{
    currentAddress:{
      addLine1:String,
      addLine2:String,
      city:String,
      state:String,
      pincode:Number
    },
    permanentAddress:{
      isSameAsCurrentAddress:Boolean,
      addLine1:String,
      addLine2:String,
      city:String,
      state:String,
      pincode:Number
    }
  },
  workExperience:[{
    exists:Boolean,
    currentJobStatus:String,
    startDate:Date,
    endDate:Date,
    jobProfile:String,
    companyName:String,
    jobLocation:{
      city:String,
      state:String,
      country:String
    },
    description:String
  }],
  skillset:[{
    skillSetName:String,
    skillLevel:Number
  }],
  uploadDocuments:{
    resumeFile:String,
    videoResumeFile:String
  },
  referralDetails:{
    name:String,
    phoneNumber:Number,
    email:String,
    designation:String
  },
  otpVerified:{
    type:Boolean,
    default:false
  },
  _id:{
    type:mongoose.Schema.Types.ObjectId,
  }
});

const candidate=module.exports=mongoose.model('candidate',candidateDetailSchema);
